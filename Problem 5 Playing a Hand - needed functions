"""
In ps4a.py, note that in the function playHand, there is a bunch of pseudocode. This pseudocode is provided to help guide you in writing your function. Check out the Why Pseudocode? resource to learn more about the What and Why of Pseudocode before you start coding your solution.

Note: Do not assume that there will always be 7 letters in a hand! The parameter n represents the size of the hand.

Testing: Before testing your code in the answer box, try out your implementation as if you were playing the game. Here is some example output of playHand:

"""

---------------------------------------------------------------------------------
# Dictonary
---------------------------------------------------------------------------------

VOWELS = 'aeiou'
CONSONANTS = 'bcdfghjklmnpqrstvwxyz'
HAND_SIZE =7 

SCRABBLE_LETTER_VALUES = {
    'a': 1, 'b': 3, 'c': 3, 'd': 2, 'e': 1, 'f': 4, 'g': 2, 'h': 4, 'i': 1, 'j': 8, 'k': 5, 'l': 1, 'm': 3, 'n': 1, 'o': 1, 'p': 3, 'q': 10, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 4, 'w': 4, 'x': 8, 'y': 4, 'z': 10
}


---------------------------------------------------------------------------------
# Load Words
---------------------------------------------------------------------------------

WORDLIST_FILENAME = "/Users/jpior/word/words.txt"

def loadWords():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist

---------------------------------------------------------------------------------
# isWordGuessed
---------------------------------------------------------------------------------

def isWordGuessed(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: boolean, True if all the letters of secretWord are in lettersGuessed;
      False otherwise
    '''
    # FILL IN YOUR CODE HERE...

    for char in secretWord:
    
        if char not in lettersGuessed:
            return False
            
    return True
    
    
---------------------------------------------------------------------------------
# getWordScore
---------------------------------------------------------------------------------
def getWordScore(word, n):
    """
    Returns the score for a word. Assumes the word is a valid word.

    The score for a word is the sum of the points for letters in the
    word, multiplied by the length of the word, PLUS 50 points if all n
    letters are used on the first turn.

    Letters are scored as in Scrabble; A is worth 1, B is worth 3, C is
    worth 3, D is worth 2, E is worth 1, and so on (see SCRABBLE_LETTER_VALUES)

    word: string (lowercase letters)
    n: integer (HAND_SIZE; i.e., hand size required for additional points)
    returns: int >= 0
    """
    # TO DO ... <-- Remove this comment when you code this function
    values = 0
    
    if len(word) == n:
        for letter in word: 
            values += SCRABBLE_LETTER_VALUES.get(letter)
        return values * len(word) + 50
    else:
        for letter in word: 
            values += SCRABBLE_LETTER_VALUES.get(letter)
        return values * len(word)
        
        
 ---------------------------------------------------------------------------------
# displayHand
--------------------------------------------------------------------------------- 

# taken from course - additional function
def displayHand(hand):
    """
    Displays the letters currently in the hand.

    For example:
    >>> displayHand({'a':1, 'x':2, 'l':3, 'e':1})
    Should print out something like:
       a x x l l l e
    The order of the letters is unimportant.

    hand: dictionary (string -> int)
    """
    for letter in hand.keys():
        for j in range(hand[letter]):
             print(letter,end=" ")       # print all on the same line
    print()                             # print an empty line

 ---------------------------------------------------------------------------------
# dealHand
--------------------------------------------------------------------------------- 

# taken from course - additional function
def dealHand(n):
    """
    Returns a random hand containing n lowercase letters.
    At least n/3 the letters in the hand should be VOWELS.

    Hands are represented as dictionaries. The keys are
    letters and the values are the number of times the
    particular letter is repeated in that hand.

    n: int >= 0
    returns: dictionary (string -> int)
    """
    hand={}
    numVowels = n // 3
    
    for i in range(numVowels):
        x = VOWELS[random.randrange(0,len(VOWELS))]
        hand[x] = hand.get(x, 0) + 1
        
    for i in range(numVowels, n):    
        x = CONSONANTS[random.randrange(0,len(CONSONANTS))]
        hand[x] = hand.get(x, 0) + 1
        
    return hand
    
 ---------------------------------------------------------------------------------
# updateHand
--------------------------------------------------------------------------------- 
    
def updateHand(hand, word):

    copied_hand = hand.copy()
    word_dictionary = {}
    
    # Add letters and their number to the dictionary
    for letter in word:
        word_dictionary[letter] = word_dictionary.get(letter, 0) + 1
    
    # Subtract the values from the given dictionary and the created dictionary
    result = {key: copied_hand[key] - word_dictionary.get(key, 0)
                       for key in copied_hand.keys()}
    return result

 ---------------------------------------------------------------------------------
# isValidWord
--------------------------------------------------------------------------------- 
    

def isValidWord(word, hand, wordList):
    """
    Returns True if word is in the wordList and is entirely
    composed of letters in the hand. Otherwise, returns False.

    Does not mutate hand or wordList.
   
    word: string
    hand: dictionary (string -> int)
    wordList: list of lowercase strings
    """
    
    handcopy=hand.copy()
    for char in word:
        if char not in handcopy or handcopy[char]<=0:
            return False
        else:
            handcopy[char] -=1
    if word in wordList:
        return True
    return False
# Final code

 ---------------------------------------------------------------------------------
# calculateHandlen
--------------------------------------------------------------------------------- 
def calculateHandlen(hand):
    """ 
    Returns the length (number of letters) in the current hand.

    hand: dictionary (string-> int)
    returns: integer
    """
    handLen = 0
    for i in hand:
        handLen = handLen + hand.get(i,0)

    return handLen
    
    
